/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package edu.vub.ideAT.parslex;
import static edu.vub.ideAT.psi.ATTypes.*;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>ATLexer.flex</tt>
 */
public class ATLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\41\0\1\55\2\0\1\55\1\0\1\46\1\0\2\55\1\54\1\43\1\0\1\42\1\55\1\47\12\2\1"+
    "\12\1\0\1\41\1\45\1\44\1\55\1\51\1\32\1\35\5\1\1\26\4\1\1\36\1\1\1\33\13\1"+
    "\3\0\1\52\1\1\1\0\1\17\1\27\1\20\1\3\1\4\1\5\1\25\1\13\1\11\1\30\1\40\1\15"+
    "\1\34\1\14\1\22\1\10\1\1\1\24\1\16\1\6\1\23\1\37\1\21\1\31\1\7\1\1\1\0\1\50"+
    "\1\0\1\53\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\10\1\1\2\13\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\22\1\1\16\22\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\1\1\24\17\1\1\25\1\26\1\27\2\1\1\30"+
    "\1\31\3\1\1\32\37\1\1\33\1\34\3\1\1\35"+
    "\24\1\1\36\1\37\3\1\1\40\1\1\1\41\1\1"+
    "\1\42\7\1\1\43\1\44\3\1\1\45\1\1\1\46"+
    "\6\1\1\47\20\1\1\50\1\1\1\51\1\52\1\1"+
    "\1\53\1\1\1\54\2\1\1\55\4\1\1\56\2\1"+
    "\1\57\2\1\1\60\1\1\1\61\1\62\2\1\1\63"+
    "\6\1\1\64\1\65\7\1\1\66\2\1\1\67\1\70"+
    "\1\71\3\1\1\72\1\73\2\1\1\74\1\1\1\75"+
    "\1\1\1\76\4\1\1\77\2\1\1\100\17\1\1\101"+
    "\6\1\1\102\2\1\1\103\2\1\1\104\1\1\1\105"+
    "\1\106\3\1\1\107\1\110\3\1\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\56\0\56\0\56"+
    "\0\u03c6\0\56\0\56\0\56\0\56\0\56\0\56\0\56"+
    "\0\56\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508"+
    "\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\u0702\0\56\0\u0730\0\u075e\0\u078c\0\u07ba"+
    "\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a"+
    "\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\56\0\56"+
    "\0\56\0\56\0\u0a6c\0\u0a9a\0\56\0\u0ac8\0\u0af6\0\u0b24"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\56\0\56\0\56\0\u0d7a"+
    "\0\u0da8\0\134\0\134\0\u0dd6\0\u0e04\0\u0e32\0\56\0\u0e60"+
    "\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0"+
    "\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140"+
    "\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0"+
    "\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\56\0\134"+
    "\0\u13f2\0\u1420\0\u144e\0\134\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6"+
    "\0\56\0\56\0\u1814\0\u1842\0\u1870\0\56\0\u189e\0\134"+
    "\0\u18cc\0\56\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0"+
    "\0\u1a0e\0\134\0\134\0\u1a3c\0\u1a6a\0\u1a98\0\56\0\u1ac6"+
    "\0\56\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\56"+
    "\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a"+
    "\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba"+
    "\0\56\0\u1ee8\0\134\0\56\0\u1f16\0\56\0\u1f44\0\56"+
    "\0\u1f72\0\u1fa0\0\56\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\56"+
    "\0\u2086\0\u20b4\0\134\0\u20e2\0\u2110\0\56\0\u213e\0\56"+
    "\0\134\0\u216c\0\u219a\0\56\0\u21c8\0\u21f6\0\u2224\0\u2252"+
    "\0\u2280\0\u22ae\0\56\0\56\0\u22dc\0\u230a\0\u2338\0\u2366"+
    "\0\u2394\0\u23c2\0\u23f0\0\56\0\u241e\0\u244c\0\56\0\56"+
    "\0\56\0\u247a\0\u24a8\0\u24d6\0\56\0\56\0\u2504\0\u2532"+
    "\0\56\0\u2560\0\56\0\u258e\0\56\0\u25bc\0\u25ea\0\u2618"+
    "\0\u2646\0\56\0\u2674\0\u26a2\0\56\0\u26d0\0\u26fe\0\u272c"+
    "\0\u275a\0\u2788\0\u27b6\0\u27e4\0\u2812\0\u2840\0\u286e\0\u289c"+
    "\0\u28ca\0\u28f8\0\u2926\0\u2954\0\56\0\u2982\0\u29b0\0\u29de"+
    "\0\u2a0c\0\u2a3a\0\u2a68\0\56\0\u2a96\0\u2ac4\0\56\0\u2af2"+
    "\0\u2b20\0\56\0\u2b4e\0\56\0\56\0\u2b7c\0\u2baa\0\u2bd8"+
    "\0\56\0\134\0\u2c06\0\u2c34\0\u2c62\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\3"+
    "\1\10\1\11\1\12\1\3\1\13\1\3\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\2\3\1\23\4\3"+
    "\1\24\4\3\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\57\0"+
    "\11\3\1\0\26\3\16\0\3\3\1\42\4\3\1\43"+
    "\1\0\7\3\1\44\16\3\16\0\11\3\1\0\2\3"+
    "\1\45\1\3\1\46\11\3\1\47\5\3\1\50\1\3"+
    "\16\0\10\3\1\51\1\0\4\3\1\52\2\3\1\53"+
    "\16\3\16\0\11\3\1\0\1\54\3\3\1\55\4\3"+
    "\1\56\14\3\16\0\11\3\1\0\11\3\1\57\14\3"+
    "\16\0\4\3\1\60\4\3\1\0\1\3\1\61\1\3"+
    "\1\62\15\3\1\63\4\3\62\0\1\64\11\0\3\3"+
    "\1\65\4\3\1\66\1\0\26\3\16\0\3\3\1\67"+
    "\5\3\1\0\10\3\1\70\15\3\16\0\11\3\1\0"+
    "\2\3\1\71\1\72\1\3\1\73\20\3\16\0\11\3"+
    "\1\0\1\74\3\3\1\75\21\3\16\0\10\3\1\76"+
    "\1\0\1\77\25\3\16\0\11\3\1\0\14\3\1\100"+
    "\11\3\16\0\11\3\1\0\1\3\1\101\1\3\1\102"+
    "\22\3\16\0\3\3\1\103\5\3\1\0\4\3\1\104"+
    "\21\3\16\0\3\3\1\105\5\3\1\0\26\3\16\0"+
    "\10\3\1\106\1\0\26\3\27\0\1\107\27\0\1\110"+
    "\1\111\57\0\1\112\11\0\4\3\1\113\4\3\1\0"+
    "\26\3\16\0\11\3\1\0\3\3\1\114\22\3\16\0"+
    "\11\3\1\115\26\3\16\0\11\3\1\0\3\3\1\116"+
    "\22\3\16\0\11\3\1\0\5\3\1\117\20\3\16\0"+
    "\5\3\1\120\1\3\1\121\1\3\1\0\5\3\1\122"+
    "\20\3\16\0\11\3\1\0\4\3\1\123\21\3\16\0"+
    "\11\3\1\0\1\3\1\124\24\3\16\0\11\3\1\0"+
    "\2\3\1\125\23\3\16\0\11\3\1\0\11\3\1\126"+
    "\14\3\16\0\3\3\1\127\5\3\1\0\26\3\16\0"+
    "\11\3\1\0\12\3\1\130\12\3\1\131\16\0\6\3"+
    "\1\132\2\3\1\0\10\3\1\133\15\3\16\0\10\3"+
    "\1\134\1\0\26\3\16\0\11\3\1\135\26\3\16\0"+
    "\11\3\1\136\26\3\16\0\11\3\1\137\7\3\1\140"+
    "\16\3\16\0\7\3\1\141\1\3\1\0\26\3\16\0"+
    "\11\3\1\0\6\3\1\142\17\3\16\0\11\3\1\0"+
    "\2\3\1\143\23\3\16\0\11\3\1\0\2\3\1\144"+
    "\23\3\16\0\7\3\1\145\1\3\1\0\26\3\16\0"+
    "\10\3\1\146\1\0\26\3\16\0\11\3\1\147\26\3"+
    "\16\0\5\3\1\150\3\3\1\0\26\3\16\0\10\3"+
    "\1\151\1\0\26\3\16\0\5\3\1\152\3\3\1\0"+
    "\26\3\16\0\5\3\1\153\3\3\1\0\26\3\16\0"+
    "\3\3\1\154\4\3\1\155\1\0\26\3\16\0\11\3"+
    "\1\0\15\3\1\156\10\3\16\0\11\3\1\0\2\3"+
    "\1\157\23\3\16\0\10\3\1\160\1\0\26\3\16\0"+
    "\4\3\1\161\1\162\3\3\1\0\4\3\1\163\1\164"+
    "\20\3\16\0\10\3\1\165\1\0\26\3\16\0\11\3"+
    "\1\0\5\3\1\166\20\3\16\0\11\3\1\0\11\3"+
    "\1\167\14\3\16\0\5\3\1\170\3\3\1\0\26\3"+
    "\16\0\11\3\1\0\5\3\1\171\20\3\16\0\3\3"+
    "\1\172\5\3\1\0\26\3\16\0\11\3\1\0\1\173"+
    "\25\3\16\0\3\3\1\174\5\3\1\0\26\3\16\0"+
    "\11\3\1\0\7\3\1\175\16\3\16\0\11\3\1\0"+
    "\2\3\1\176\23\3\16\0\11\3\1\0\2\3\1\177"+
    "\23\3\16\0\11\3\1\0\4\3\1\200\21\3\16\0"+
    "\11\3\1\0\3\3\1\201\22\3\16\0\3\3\1\202"+
    "\5\3\1\0\26\3\16\0\11\3\1\0\1\3\1\203"+
    "\24\3\16\0\11\3\1\0\3\3\1\204\6\3\1\205"+
    "\13\3\16\0\3\3\1\206\5\3\1\0\26\3\16\0"+
    "\11\3\1\207\26\3\16\0\3\3\1\210\5\3\1\0"+
    "\26\3\16\0\11\3\1\0\1\3\1\211\24\3\16\0"+
    "\11\3\1\0\2\3\1\212\23\3\16\0\11\3\1\0"+
    "\7\3\1\213\16\3\16\0\4\3\1\214\4\3\1\0"+
    "\26\3\16\0\3\3\1\215\5\3\1\0\26\3\16\0"+
    "\11\3\1\0\4\3\1\216\21\3\16\0\11\3\1\0"+
    "\7\3\1\217\16\3\16\0\11\3\1\0\2\3\1\220"+
    "\23\3\16\0\11\3\1\0\5\3\1\221\20\3\16\0"+
    "\11\3\1\0\1\222\25\3\16\0\11\3\1\0\1\3"+
    "\1\223\24\3\16\0\11\3\1\0\2\3\1\224\23\3"+
    "\16\0\3\3\1\225\5\3\1\0\26\3\16\0\3\3"+
    "\1\226\5\3\1\0\26\3\16\0\11\3\1\0\1\3"+
    "\1\227\24\3\16\0\11\3\1\0\2\3\1\230\23\3"+
    "\16\0\11\3\1\0\11\3\1\231\14\3\16\0\2\3"+
    "\1\232\6\3\1\0\26\3\16\0\11\3\1\0\7\3"+
    "\1\233\16\3\16\0\11\3\1\0\3\3\1\234\22\3"+
    "\16\0\11\3\1\0\7\3\1\235\16\3\16\0\11\3"+
    "\1\0\11\3\1\236\14\3\16\0\6\3\1\237\2\3"+
    "\1\0\26\3\16\0\11\3\1\0\7\3\1\240\16\3"+
    "\16\0\11\3\1\241\26\3\16\0\11\3\1\242\26\3"+
    "\16\0\11\3\1\0\1\3\1\243\24\3\16\0\11\3"+
    "\1\0\11\3\1\244\14\3\16\0\11\3\1\0\10\3"+
    "\1\245\15\3\16\0\11\3\1\246\26\3\16\0\11\3"+
    "\1\0\2\3\1\247\23\3\16\0\3\3\1\250\5\3"+
    "\1\0\26\3\16\0\11\3\1\0\4\3\1\251\21\3"+
    "\16\0\11\3\1\252\26\3\16\0\11\3\1\0\20\3"+
    "\1\253\5\3\16\0\3\3\1\254\5\3\1\0\26\3"+
    "\16\0\11\3\1\0\1\3\1\255\16\3\1\256\5\3"+
    "\16\0\5\3\1\257\3\3\1\0\26\3\16\0\11\3"+
    "\1\0\4\3\1\260\21\3\16\0\11\3\1\0\11\3"+
    "\1\261\14\3\16\0\11\3\1\0\11\3\1\262\14\3"+
    "\16\0\11\3\1\0\3\3\1\263\22\3\16\0\11\3"+
    "\1\0\11\3\1\264\14\3\16\0\2\3\1\265\6\3"+
    "\1\0\26\3\16\0\11\3\1\0\1\266\25\3\16\0"+
    "\11\3\1\267\26\3\16\0\3\3\1\270\5\3\1\271"+
    "\26\3\16\0\3\3\1\272\5\3\1\0\26\3\16\0"+
    "\11\3\1\0\5\3\1\273\20\3\16\0\11\3\1\0"+
    "\3\3\1\274\22\3\16\0\11\3\1\0\12\3\1\275"+
    "\13\3\16\0\3\3\1\276\5\3\1\0\26\3\16\0"+
    "\11\3\1\0\4\3\1\277\21\3\16\0\11\3\1\300"+
    "\26\3\16\0\11\3\1\0\1\3\1\301\24\3\16\0"+
    "\3\3\1\302\5\3\1\0\26\3\16\0\11\3\1\0"+
    "\21\3\1\303\4\3\16\0\11\3\1\0\7\3\1\304"+
    "\16\3\16\0\7\3\1\305\1\3\1\0\26\3\16\0"+
    "\11\3\1\0\1\3\1\306\22\3\1\307\1\3\16\0"+
    "\2\3\1\310\6\3\1\0\26\3\16\0\5\3\1\311"+
    "\3\3\1\0\26\3\16\0\2\3\1\312\6\3\1\0"+
    "\26\3\16\0\11\3\1\0\2\3\1\313\23\3\16\0"+
    "\11\3\1\0\5\3\1\314\20\3\16\0\4\3\1\315"+
    "\4\3\1\0\26\3\16\0\2\3\1\316\6\3\1\0"+
    "\26\3\16\0\11\3\1\0\20\3\1\317\5\3\16\0"+
    "\4\3\1\320\4\3\1\0\26\3\16\0\11\3\1\321"+
    "\26\3\16\0\5\3\1\322\3\3\1\0\26\3\16\0"+
    "\5\3\1\323\3\3\1\0\26\3\16\0\11\3\1\324"+
    "\26\3\16\0\11\3\1\0\20\3\1\325\5\3\16\0"+
    "\11\3\1\326\26\3\16\0\11\3\1\0\24\3\1\327"+
    "\1\3\16\0\11\3\1\330\26\3\16\0\5\3\1\331"+
    "\3\3\1\0\26\3\16\0\11\3\1\0\3\3\1\332"+
    "\22\3\16\0\11\3\1\333\13\3\1\334\12\3\16\0"+
    "\11\3\1\0\5\3\1\335\20\3\16\0\11\3\1\0"+
    "\5\3\1\336\20\3\16\0\11\3\1\0\1\3\1\337"+
    "\24\3\16\0\11\3\1\340\26\3\16\0\3\3\1\341"+
    "\5\3\1\0\26\3\16\0\11\3\1\0\11\3\1\342"+
    "\14\3\16\0\3\3\1\343\5\3\1\0\26\3\16\0"+
    "\11\3\1\0\1\3\1\344\24\3\16\0\3\3\1\345"+
    "\5\3\1\0\26\3\16\0\11\3\1\346\3\3\1\347"+
    "\22\3\16\0\11\3\1\350\26\3\16\0\3\3\1\351"+
    "\5\3\1\0\26\3\16\0\6\3\1\352\2\3\1\0"+
    "\26\3\16\0\11\3\1\0\1\353\25\3\16\0\11\3"+
    "\1\354\26\3\16\0\11\3\1\0\17\3\1\355\6\3"+
    "\16\0\4\3\1\356\4\3\1\0\26\3\16\0\4\3"+
    "\1\357\4\3\1\0\26\3\16\0\3\3\1\360\5\3"+
    "\1\0\26\3\16\0\4\3\1\361\4\3\1\0\26\3"+
    "\16\0\3\3\1\362\5\3\1\0\26\3\16\0\11\3"+
    "\1\363\26\3\16\0\11\3\1\364\26\3\16\0\11\3"+
    "\1\0\4\3\1\365\21\3\16\0\5\3\1\366\3\3"+
    "\1\0\26\3\16\0\5\3\1\367\3\3\1\0\26\3"+
    "\16\0\3\3\1\370\5\3\1\0\26\3\16\0\11\3"+
    "\1\0\3\3\1\371\17\3\1\372\2\3\16\0\3\3"+
    "\1\373\5\3\1\374\26\3\16\0\3\3\1\375\5\3"+
    "\1\0\26\3\16\0\11\3\1\0\11\3\1\376\14\3"+
    "\16\0\11\3\1\377\26\3\16\0\11\3\1\u0100\26\3"+
    "\16\0\11\3\1\u0101\26\3\16\0\11\3\1\0\3\3"+
    "\1\u0102\22\3\16\0\4\3\1\u0103\4\3\1\0\26\3"+
    "\16\0\11\3\1\0\2\3\1\u0104\23\3\16\0\11\3"+
    "\1\u0105\26\3\16\0\11\3\1\u0106\26\3\16\0\11\3"+
    "\1\0\11\3\1\u0107\14\3\16\0\11\3\1\0\1\3"+
    "\1\u0108\24\3\16\0\11\3\1\u0109\20\3\1\u010a\5\3"+
    "\16\0\11\3\1\u010b\26\3\16\0\11\3\1\0\5\3"+
    "\1\u010c\20\3\16\0\11\3\1\u010d\26\3\16\0\10\3"+
    "\1\u010e\1\0\26\3\16\0\2\3\1\u010f\6\3\1\0"+
    "\26\3\16\0\11\3\1\0\5\3\1\u0110\20\3\16\0"+
    "\3\3\1\u0111\5\3\1\0\26\3\16\0\11\3\1\u0112"+
    "\26\3\16\0\11\3\1\0\2\3\1\u0113\23\3\16\0"+
    "\10\3\1\u0114\1\0\26\3\16\0\11\3\1\u0115\26\3"+
    "\16\0\2\3\1\u0116\6\3\1\0\26\3\16\0\11\3"+
    "\1\0\1\3\1\u0117\24\3\16\0\5\3\1\u0118\3\3"+
    "\1\0\26\3\16\0\11\3\1\0\11\3\1\u0119\14\3"+
    "\16\0\11\3\1\0\22\3\1\u011a\3\3\16\0\5\3"+
    "\1\u011b\3\3\1\0\26\3\16\0\2\3\1\u011c\6\3"+
    "\1\0\26\3\16\0\10\3\1\u011d\1\0\26\3\16\0"+
    "\11\3\1\0\1\3\1\u011e\24\3\16\0\11\3\1\0"+
    "\2\3\1\u011f\23\3\16\0\11\3\1\0\17\3\1\u0120"+
    "\6\3\16\0\3\3\1\u0121\5\3\1\0\26\3\16\0"+
    "\11\3\1\0\11\3\1\u0122\14\3\16\0\6\3\1\u0123"+
    "\2\3\1\0\26\3\16\0\3\3\1\u0124\5\3\1\0"+
    "\26\3\16\0\11\3\1\u0125\26\3\16\0\11\3\1\0"+
    "\1\3\1\u0126\24\3\16\0\3\3\1\u0127\5\3\1\0"+
    "\26\3\16\0\3\3\1\u0128\5\3\1\0\26\3\16\0"+
    "\11\3\1\0\5\3\1\u0129\20\3\16\0\2\3\1\u012a"+
    "\6\3\1\0\26\3\16\0\11\3\1\0\7\3\1\u012b"+
    "\16\3\16\0\11\3\1\u012c\26\3\16\0\2\3\1\u012d"+
    "\6\3\1\0\26\3\16\0\3\3\1\u012e\5\3\1\0"+
    "\26\3\16\0\11\3\1\u012f\26\3\16\0\11\3\1\0"+
    "\11\3\1\u0130\14\3\16\0\5\3\1\u0131\3\3\1\0"+
    "\26\3\16\0\11\3\1\u0132\26\3\16\0\11\3\1\0"+
    "\11\3\1\u0133\14\3\16\0\11\3\1\u0134\26\3\16\0"+
    "\11\3\1\u0135\26\3\16\0\11\3\1\0\3\3\1\u0136"+
    "\22\3\16\0\11\3\1\0\7\3\1\u0137\16\3\16\0"+
    "\3\3\1\u0138\5\3\1\0\26\3\16\0\11\3\1\u0139"+
    "\26\3\16\0\11\3\1\0\11\3\1\u013a\14\3\16\0"+
    "\2\3\1\u013b\6\3\1\0\26\3\16\0\11\3\1\0"+
    "\22\3\1\u013c\3\3\16\0\6\3\1\u013d\2\3\1\0"+
    "\26\3\16\0\11\3\1\u013e\26\3\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11408];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\3\11\1\1\10\11\22\1\1\11"+
    "\22\1\4\11\2\1\1\11\17\1\3\11\7\1\1\11"+
    "\37\1\1\11\31\1\2\11\3\1\1\11\3\1\1\11"+
    "\14\1\1\11\1\1\1\11\6\1\1\11\20\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\4\1\1\11\5\1\1\11\1\1\1\11\3\1\1\11"+
    "\6\1\2\11\7\1\1\11\2\1\3\11\3\1\2\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\4\1\1\11"+
    "\2\1\1\11\17\1\1\11\6\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\2\11\3\1\1\11\4\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 public ATLexer() {
     this((java.io.Reader)null);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ATLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.WHITE_SPACE;
            }
          case 74: break;
          case 2: 
            { return COL_OP;
            }
          case 75: break;
          case 3: 
            { return MIN_OP;
            }
          case 76: break;
          case 4: 
            { return PLUS_OP;
            }
          case 77: break;
          case 5: 
            { return GREAT_OP;
            }
          case 78: break;
          case 6: 
            { return AND_OP;
            }
          case 79: break;
          case 7: 
            { return DIV_OP;
            }
          case 80: break;
          case 8: 
            { return OR_OP;
            }
          case 81: break;
          case 9: 
            { return AT_OP;
            }
          case 82: break;
          case 10: 
            { return POW_OP;
            }
          case 83: break;
          case 11: 
            { return TILD_OP;
            }
          case 84: break;
          case 12: 
            { return MUL_OP;
            }
          case 85: break;
          case 13: 
            { return TokenType.BAD_CHARACTER;
            }
          case 86: break;
          case 14: 
            { return ASSIGN_OP;
            }
          case 87: break;
          case 15: 
            { return SUBTYPE_KEY;
            }
          case 88: break;
          case 16: 
            { return ASYNCSEND_KEY;
            }
          case 89: break;
          case 17: 
            { return HOSEND_KEY;
            }
          case 90: break;
          case 18: 
            { return EQ_OP;
            }
          case 91: break;
          case 19: 
            { return DEF_KEY;
            }
          case 92: break;
          case 20: 
            { return DO_KEY;
            }
          case 93: break;
          case 21: 
            { return IF_KEY;
            }
          case 94: break;
          case 22: 
            { return IN_KEY;
            }
          case 95: break;
          case 23: 
            { return IS_KEY;
            }
          case 96: break;
          case 24: 
            { return NEW_KEY;
            }
          case 97: break;
          case 25: 
            { return NIL_CONST;
            }
          case 98: break;
          case 26: 
            { return AS_KEY;
            }
          case 99: break;
          case 27: 
            { return TRY_KEY;
            }
          case 100: break;
          case 28: 
            { return TRUE_CONST;
            }
          case 101: break;
          case 29: 
            { return SELF_KEY;
            }
          case 102: break;
          case 30: 
            { return ELSE_KEY;
            }
          case 103: break;
          case 31: 
            { return EACH_KEY;
            }
          case 104: break;
          case 32: 
            { return EVAL_KEY;
            }
          case 105: break;
          case 33: 
            { return FALSE_CONST;
            }
          case 106: break;
          case 34: 
            { return THEN_KEY;
            }
          case 107: break;
          case 35: 
            { return SUPER_KEY;
            }
          case 108: break;
          case 36: 
            { return ALIAS_KEY;
            }
          case 109: break;
          case 37: 
            { return WITH_KEY;
            }
          case 110: break;
          case 38: 
            { return WHEN_KEY;
            }
          case 111: break;
          case 39: 
            { return READ_KEY;
            }
          case 112: break;
          case 40: 
            { return PRINT_KEY;
            }
          case 113: break;
          case 41: 
            { return IMPORT_KEY;
            }
          case 114: break;
          case 42: 
            { return ACTOR_KEY;
            }
          case 115: break;
          case 43: 
            { return CATCH_KEY;
            }
          case 116: break;
          case 44: 
            { return WHILE_KEY;
            }
          case 117: break;
          case 45: 
            { return USING_KEY;
            }
          case 118: break;
          case 46: 
            { return RAISE_KEY;
            }
          case 119: break;
          case 47: 
            { return DEFTYPE_KEY;
            }
          case 120: break;
          case 48: 
            { return EXTEND_KEY;
            }
          case 121: break;
          case 49: 
            { return EXPORT_KEY;
            }
          case 122: break;
          case 50: 
            { return EXCLUDE_KEY;
            }
          case 123: break;
          case 51: 
            { return TAGSOF_KEY;
            }
          case 124: break;
          case 52: 
            { return OBJECT_KEY;
            }
          case 125: break;
          case 53: 
            { return UNLESS_KEY;
            }
          case 126: break;
          case 54: 
            { return MIRROR_KEY;
            }
          case 127: break;
          case 55: 
            { return EXTENDS_KEY;
            }
          case 128: break;
          case 56: 
            { return FINALLY_KEY;
            }
          case 129: break;
          case 57: 
            { return FOREACH_KEY;
            }
          case 130: break;
          case 58: 
            { return ISOLATE_KEY;
            }
          case 131: break;
          case 59: 
            { return CHILDOF_KEY;
            }
          case 132: break;
          case 60: 
            { return REFLECT_KEY;
            }
          case 133: break;
          case 61: 
            { return RETRACT_KEY;
            }
          case 134: break;
          case 62: 
            { return BECOMES_KEY;
            }
          case 135: break;
          case 63: 
            { return TAGGEDAS_KEY;
            }
          case 136: break;
          case 64: 
            { return WHENEVER_KEY;
            }
          case 137: break;
          case 65: 
            { return DISCOVERED_KEY;
            }
          case 138: break;
          case 66: 
            { return MIRROREDBY_KEY;
            }
          case 139: break;
          case 67: 
            { return TAKEOFFLINE_KEY;
            }
          case 140: break;
          case 68: 
            { return RECONNECTED_KEY;
            }
          case 141: break;
          case 69: 
            { return DISCONNECTED_KEY;
            }
          case 142: break;
          case 70: 
            { return TAKENOFFLINE_KEY;
            }
          case 143: break;
          case 71: 
            { return USINGHANDLERS_KEY;
            }
          case 144: break;
          case 72: 
            { return REFLECTONACTOR_KEY;
            }
          case 145: break;
          case 73: 
            { return BECOMEMIRROREDBY_KEY;
            }
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
