/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package edu.vub.ideAT.parslex;
import static edu.vub.ideAT.psi.ATTypes.*;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>ATLexer.flex</tt>
 */
public class ATLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\12\0\1\4\2\0\1\4\23\0\1\56\2\0\1\56\1\0\1\50\1\0\2\56\1\55\1\45\1\0\1\44"+
    "\1\56\1\3\12\2\1\14\1\0\1\43\1\47\1\46\1\56\1\52\1\34\1\37\5\1\1\30\4\1\1"+
    "\40\1\1\1\35\13\1\3\0\1\53\1\1\1\0\1\21\1\31\1\22\1\5\1\6\1\7\1\27\1\15\1"+
    "\13\1\32\1\42\1\17\1\36\1\16\1\24\1\12\1\1\1\26\1\20\1\10\1\25\1\41\1\23\1"+
    "\33\1\11\1\1\1\0\1\51\1\0\1\54\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\6\1\1\3\13\1\1\4\1\5"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\22\1\1\17\22\1\1\20\1\21\1\22"+
    "\1\23\1\24\1\1\1\25\17\1\1\26\1\27\1\30"+
    "\2\1\1\31\1\32\3\1\1\33\37\1\1\34\1\35"+
    "\3\1\1\36\24\1\1\37\1\40\3\1\1\41\1\1"+
    "\1\42\1\1\1\43\7\1\1\44\1\45\3\1\1\46"+
    "\1\1\1\47\6\1\1\50\20\1\1\51\1\1\1\52"+
    "\1\53\1\1\1\54\1\1\1\55\2\1\1\56\4\1"+
    "\1\57\2\1\1\60\2\1\1\61\1\1\1\62\1\63"+
    "\2\1\1\64\6\1\1\65\1\66\7\1\1\67\2\1"+
    "\1\70\1\71\1\72\3\1\1\73\1\74\2\1\1\75"+
    "\1\1\1\76\1\1\1\77\4\1\1\100\2\1\1\101"+
    "\17\1\1\102\6\1\1\103\2\1\1\104\2\1\1\105"+
    "\1\1\1\106\1\107\3\1\1\110\1\111\3\1\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\57\0\57"+
    "\0\57\0\u040a\0\57\0\57\0\57\0\57\0\57\0\57"+
    "\0\57\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\57\0\u07b6\0\u07e5\0\u0814"+
    "\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\57"+
    "\0\57\0\57\0\57\0\u0b04\0\u0b33\0\57\0\u0b62\0\u0b91"+
    "\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\57\0\57\0\57"+
    "\0\u0e23\0\u0e52\0\136\0\136\0\u0e81\0\u0eb0\0\u0edf\0\57"+
    "\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057"+
    "\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf"+
    "\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347"+
    "\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\57"+
    "\0\136\0\u14bf\0\u14ee\0\u151d\0\136\0\u154c\0\u157b\0\u15aa"+
    "\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722"+
    "\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a"+
    "\0\u18c9\0\57\0\57\0\u18f8\0\u1927\0\u1956\0\57\0\u1985"+
    "\0\136\0\u19b4\0\57\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f"+
    "\0\u1ace\0\u1afd\0\136\0\136\0\u1b2c\0\u1b5b\0\u1b8a\0\57"+
    "\0\u1bb9\0\57\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3"+
    "\0\57\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c"+
    "\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94"+
    "\0\u1fc3\0\57\0\u1ff2\0\136\0\57\0\u2021\0\57\0\u2050"+
    "\0\57\0\u207f\0\u20ae\0\57\0\u20dd\0\u210c\0\u213b\0\u216a"+
    "\0\57\0\u2199\0\u21c8\0\136\0\u21f7\0\u2226\0\57\0\u2255"+
    "\0\57\0\136\0\u2284\0\u22b3\0\57\0\u22e2\0\u2311\0\u2340"+
    "\0\u236f\0\u239e\0\u23cd\0\57\0\57\0\u23fc\0\u242b\0\u245a"+
    "\0\u2489\0\u24b8\0\u24e7\0\u2516\0\57\0\u2545\0\u2574\0\57"+
    "\0\57\0\57\0\u25a3\0\u25d2\0\u2601\0\57\0\57\0\u2630"+
    "\0\u265f\0\57\0\u268e\0\57\0\u26bd\0\57\0\u26ec\0\u271b"+
    "\0\u274a\0\u2779\0\57\0\u27a8\0\u27d7\0\57\0\u2806\0\u2835"+
    "\0\u2864\0\u2893\0\u28c2\0\u28f1\0\u2920\0\u294f\0\u297e\0\u29ad"+
    "\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98\0\57\0\u2ac7\0\u2af6"+
    "\0\u2b25\0\u2b54\0\u2b83\0\u2bb2\0\57\0\u2be1\0\u2c10\0\57"+
    "\0\u2c3f\0\u2c6e\0\57\0\u2c9d\0\57\0\57\0\u2ccc\0\u2cfb"+
    "\0\u2d2a\0\57\0\136\0\u2d59\0\u2d88\0\u2db7\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\3\1\11\1\12\1\13\1\3\1\14\1\3"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\2\3"+
    "\1\24\4\3\1\25\4\3\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\60\0\2\3\2\0\7\3\1\0\26\3\17\0\1\42"+
    "\54\0\2\3\2\0\1\3\1\43\4\3\1\44\1\0"+
    "\7\3\1\45\16\3\15\0\2\3\2\0\7\3\1\0"+
    "\2\3\1\46\1\3\1\47\11\3\1\50\5\3\1\51"+
    "\1\3\15\0\2\3\2\0\6\3\1\52\1\0\4\3"+
    "\1\53\2\3\1\54\16\3\15\0\2\3\2\0\7\3"+
    "\1\0\1\55\3\3\1\56\4\3\1\57\14\3\15\0"+
    "\2\3\2\0\7\3\1\0\11\3\1\60\14\3\15\0"+
    "\2\3\2\0\2\3\1\61\4\3\1\0\1\3\1\62"+
    "\1\3\1\63\15\3\1\64\4\3\63\0\1\65\10\0"+
    "\2\3\2\0\1\3\1\66\4\3\1\67\1\0\26\3"+
    "\15\0\2\3\2\0\1\3\1\70\5\3\1\0\10\3"+
    "\1\71\15\3\15\0\2\3\2\0\7\3\1\0\2\3"+
    "\1\72\1\73\1\3\1\74\20\3\15\0\2\3\2\0"+
    "\7\3\1\0\1\75\3\3\1\76\21\3\15\0\2\3"+
    "\2\0\6\3\1\77\1\0\1\100\25\3\15\0\2\3"+
    "\2\0\7\3\1\0\14\3\1\101\11\3\15\0\2\3"+
    "\2\0\7\3\1\0\1\3\1\102\1\3\1\103\22\3"+
    "\15\0\2\3\2\0\1\3\1\104\5\3\1\0\4\3"+
    "\1\105\21\3\15\0\2\3\2\0\1\3\1\106\5\3"+
    "\1\0\26\3\15\0\2\3\2\0\6\3\1\107\1\0"+
    "\26\3\30\0\1\110\27\0\1\111\1\112\60\0\1\113"+
    "\7\0\4\42\1\0\52\42\1\0\2\3\2\0\2\3"+
    "\1\114\4\3\1\0\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\3\3\1\115\22\3\15\0\2\3\2\0\7\3"+
    "\1\116\26\3\15\0\2\3\2\0\7\3\1\0\3\3"+
    "\1\117\22\3\15\0\2\3\2\0\7\3\1\0\5\3"+
    "\1\120\20\3\15\0\2\3\2\0\3\3\1\121\1\3"+
    "\1\122\1\3\1\0\5\3\1\123\20\3\15\0\2\3"+
    "\2\0\7\3\1\0\4\3\1\124\21\3\15\0\2\3"+
    "\2\0\7\3\1\0\1\3\1\125\24\3\15\0\2\3"+
    "\2\0\7\3\1\0\2\3\1\126\23\3\15\0\2\3"+
    "\2\0\7\3\1\0\11\3\1\127\14\3\15\0\2\3"+
    "\2\0\1\3\1\130\5\3\1\0\26\3\15\0\2\3"+
    "\2\0\7\3\1\0\12\3\1\131\12\3\1\132\15\0"+
    "\2\3\2\0\4\3\1\133\2\3\1\0\10\3\1\134"+
    "\15\3\15\0\2\3\2\0\6\3\1\135\1\0\26\3"+
    "\15\0\2\3\2\0\7\3\1\136\26\3\15\0\2\3"+
    "\2\0\7\3\1\137\26\3\15\0\2\3\2\0\7\3"+
    "\1\140\7\3\1\141\16\3\15\0\2\3\2\0\5\3"+
    "\1\142\1\3\1\0\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\6\3\1\143\17\3\15\0\2\3\2\0\7\3"+
    "\1\0\2\3\1\144\23\3\15\0\2\3\2\0\7\3"+
    "\1\0\2\3\1\145\23\3\15\0\2\3\2\0\5\3"+
    "\1\146\1\3\1\0\26\3\15\0\2\3\2\0\6\3"+
    "\1\147\1\0\26\3\15\0\2\3\2\0\7\3\1\150"+
    "\26\3\15\0\2\3\2\0\3\3\1\151\3\3\1\0"+
    "\26\3\15\0\2\3\2\0\6\3\1\152\1\0\26\3"+
    "\15\0\2\3\2\0\3\3\1\153\3\3\1\0\26\3"+
    "\15\0\2\3\2\0\3\3\1\154\3\3\1\0\26\3"+
    "\15\0\2\3\2\0\1\3\1\155\4\3\1\156\1\0"+
    "\26\3\15\0\2\3\2\0\7\3\1\0\15\3\1\157"+
    "\10\3\15\0\2\3\2\0\7\3\1\0\2\3\1\160"+
    "\23\3\15\0\2\3\2\0\6\3\1\161\1\0\26\3"+
    "\15\0\2\3\2\0\2\3\1\162\1\163\3\3\1\0"+
    "\4\3\1\164\1\165\20\3\15\0\2\3\2\0\6\3"+
    "\1\166\1\0\26\3\15\0\2\3\2\0\7\3\1\0"+
    "\5\3\1\167\20\3\15\0\2\3\2\0\7\3\1\0"+
    "\11\3\1\170\14\3\15\0\2\3\2\0\3\3\1\171"+
    "\3\3\1\0\26\3\15\0\2\3\2\0\7\3\1\0"+
    "\5\3\1\172\20\3\15\0\2\3\2\0\1\3\1\173"+
    "\5\3\1\0\26\3\15\0\2\3\2\0\7\3\1\0"+
    "\1\174\25\3\15\0\2\3\2\0\1\3\1\175\5\3"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\0\7\3"+
    "\1\176\16\3\15\0\2\3\2\0\7\3\1\0\2\3"+
    "\1\177\23\3\15\0\2\3\2\0\7\3\1\0\2\3"+
    "\1\200\23\3\15\0\2\3\2\0\7\3\1\0\4\3"+
    "\1\201\21\3\15\0\2\3\2\0\7\3\1\0\3\3"+
    "\1\202\22\3\15\0\2\3\2\0\1\3\1\203\5\3"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\0\1\3"+
    "\1\204\24\3\15\0\2\3\2\0\7\3\1\0\3\3"+
    "\1\205\6\3\1\206\13\3\15\0\2\3\2\0\1\3"+
    "\1\207\5\3\1\0\26\3\15\0\2\3\2\0\7\3"+
    "\1\210\26\3\15\0\2\3\2\0\1\3\1\211\5\3"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\0\1\3"+
    "\1\212\24\3\15\0\2\3\2\0\7\3\1\0\2\3"+
    "\1\213\23\3\15\0\2\3\2\0\7\3\1\0\7\3"+
    "\1\214\16\3\15\0\2\3\2\0\2\3\1\215\4\3"+
    "\1\0\26\3\15\0\2\3\2\0\1\3\1\216\5\3"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\0\4\3"+
    "\1\217\21\3\15\0\2\3\2\0\7\3\1\0\7\3"+
    "\1\220\16\3\15\0\2\3\2\0\7\3\1\0\2\3"+
    "\1\221\23\3\15\0\2\3\2\0\7\3\1\0\5\3"+
    "\1\222\20\3\15\0\2\3\2\0\7\3\1\0\1\223"+
    "\25\3\15\0\2\3\2\0\7\3\1\0\1\3\1\224"+
    "\24\3\15\0\2\3\2\0\7\3\1\0\2\3\1\225"+
    "\23\3\15\0\2\3\2\0\1\3\1\226\5\3\1\0"+
    "\26\3\15\0\2\3\2\0\1\3\1\227\5\3\1\0"+
    "\26\3\15\0\2\3\2\0\7\3\1\0\1\3\1\230"+
    "\24\3\15\0\2\3\2\0\7\3\1\0\2\3\1\231"+
    "\23\3\15\0\2\3\2\0\7\3\1\0\11\3\1\232"+
    "\14\3\15\0\2\3\2\0\1\233\6\3\1\0\26\3"+
    "\15\0\2\3\2\0\7\3\1\0\7\3\1\234\16\3"+
    "\15\0\2\3\2\0\7\3\1\0\3\3\1\235\22\3"+
    "\15\0\2\3\2\0\7\3\1\0\7\3\1\236\16\3"+
    "\15\0\2\3\2\0\7\3\1\0\11\3\1\237\14\3"+
    "\15\0\2\3\2\0\4\3\1\240\2\3\1\0\26\3"+
    "\15\0\2\3\2\0\7\3\1\0\7\3\1\241\16\3"+
    "\15\0\2\3\2\0\7\3\1\242\26\3\15\0\2\3"+
    "\2\0\7\3\1\243\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\1\3\1\244\24\3\15\0\2\3\2\0\7\3"+
    "\1\0\11\3\1\245\14\3\15\0\2\3\2\0\7\3"+
    "\1\0\10\3\1\246\15\3\15\0\2\3\2\0\7\3"+
    "\1\247\26\3\15\0\2\3\2\0\7\3\1\0\2\3"+
    "\1\250\23\3\15\0\2\3\2\0\1\3\1\251\5\3"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\0\4\3"+
    "\1\252\21\3\15\0\2\3\2\0\7\3\1\253\26\3"+
    "\15\0\2\3\2\0\7\3\1\0\20\3\1\254\5\3"+
    "\15\0\2\3\2\0\1\3\1\255\5\3\1\0\26\3"+
    "\15\0\2\3\2\0\7\3\1\0\1\3\1\256\16\3"+
    "\1\257\5\3\15\0\2\3\2\0\3\3\1\260\3\3"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\0\4\3"+
    "\1\261\21\3\15\0\2\3\2\0\7\3\1\0\11\3"+
    "\1\262\14\3\15\0\2\3\2\0\7\3\1\0\11\3"+
    "\1\263\14\3\15\0\2\3\2\0\7\3\1\0\3\3"+
    "\1\264\22\3\15\0\2\3\2\0\7\3\1\0\11\3"+
    "\1\265\14\3\15\0\2\3\2\0\1\266\6\3\1\0"+
    "\26\3\15\0\2\3\2\0\7\3\1\0\1\267\25\3"+
    "\15\0\2\3\2\0\7\3\1\270\26\3\15\0\2\3"+
    "\2\0\1\3\1\271\5\3\1\272\26\3\15\0\2\3"+
    "\2\0\1\3\1\273\5\3\1\0\26\3\15\0\2\3"+
    "\2\0\7\3\1\0\5\3\1\274\20\3\15\0\2\3"+
    "\2\0\7\3\1\0\3\3\1\275\22\3\15\0\2\3"+
    "\2\0\7\3\1\0\12\3\1\276\13\3\15\0\2\3"+
    "\2\0\1\3\1\277\5\3\1\0\26\3\15\0\2\3"+
    "\2\0\7\3\1\0\4\3\1\300\21\3\15\0\2\3"+
    "\2\0\7\3\1\301\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\1\3\1\302\24\3\15\0\2\3\2\0\1\3"+
    "\1\303\5\3\1\0\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\21\3\1\304\4\3\15\0\2\3\2\0\7\3"+
    "\1\0\7\3\1\305\16\3\15\0\2\3\2\0\5\3"+
    "\1\306\1\3\1\0\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\1\3\1\307\22\3\1\310\1\3\15\0\2\3"+
    "\2\0\1\311\6\3\1\0\26\3\15\0\2\3\2\0"+
    "\3\3\1\312\3\3\1\0\26\3\15\0\2\3\2\0"+
    "\1\313\6\3\1\0\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\2\3\1\314\23\3\15\0\2\3\2\0\7\3"+
    "\1\0\5\3\1\315\20\3\15\0\2\3\2\0\2\3"+
    "\1\316\4\3\1\0\26\3\15\0\2\3\2\0\1\317"+
    "\6\3\1\0\26\3\15\0\2\3\2\0\7\3\1\0"+
    "\20\3\1\320\5\3\15\0\2\3\2\0\2\3\1\321"+
    "\4\3\1\0\26\3\15\0\2\3\2\0\7\3\1\322"+
    "\26\3\15\0\2\3\2\0\3\3\1\323\3\3\1\0"+
    "\26\3\15\0\2\3\2\0\3\3\1\324\3\3\1\0"+
    "\26\3\15\0\2\3\2\0\7\3\1\325\26\3\15\0"+
    "\2\3\2\0\7\3\1\0\20\3\1\326\5\3\15\0"+
    "\2\3\2\0\7\3\1\327\26\3\15\0\2\3\2\0"+
    "\7\3\1\0\24\3\1\330\1\3\15\0\2\3\2\0"+
    "\7\3\1\331\26\3\15\0\2\3\2\0\3\3\1\332"+
    "\3\3\1\0\26\3\15\0\2\3\2\0\7\3\1\0"+
    "\3\3\1\333\22\3\15\0\2\3\2\0\7\3\1\334"+
    "\13\3\1\335\12\3\15\0\2\3\2\0\7\3\1\0"+
    "\5\3\1\336\20\3\15\0\2\3\2\0\7\3\1\0"+
    "\5\3\1\337\20\3\15\0\2\3\2\0\7\3\1\0"+
    "\1\3\1\340\24\3\15\0\2\3\2\0\7\3\1\341"+
    "\26\3\15\0\2\3\2\0\1\3\1\342\5\3\1\0"+
    "\26\3\15\0\2\3\2\0\7\3\1\0\11\3\1\343"+
    "\14\3\15\0\2\3\2\0\1\3\1\344\5\3\1\0"+
    "\26\3\15\0\2\3\2\0\7\3\1\0\1\3\1\345"+
    "\24\3\15\0\2\3\2\0\1\3\1\346\5\3\1\0"+
    "\26\3\15\0\2\3\2\0\7\3\1\347\3\3\1\350"+
    "\22\3\15\0\2\3\2\0\7\3\1\351\26\3\15\0"+
    "\2\3\2\0\1\3\1\352\5\3\1\0\26\3\15\0"+
    "\2\3\2\0\4\3\1\353\2\3\1\0\26\3\15\0"+
    "\2\3\2\0\7\3\1\0\1\354\25\3\15\0\2\3"+
    "\2\0\7\3\1\355\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\17\3\1\356\6\3\15\0\2\3\2\0\2\3"+
    "\1\357\4\3\1\0\26\3\15\0\2\3\2\0\2\3"+
    "\1\360\4\3\1\0\26\3\15\0\2\3\2\0\1\3"+
    "\1\361\5\3\1\0\26\3\15\0\2\3\2\0\2\3"+
    "\1\362\4\3\1\0\26\3\15\0\2\3\2\0\1\3"+
    "\1\363\5\3\1\0\26\3\15\0\2\3\2\0\7\3"+
    "\1\364\26\3\15\0\2\3\2\0\7\3\1\365\26\3"+
    "\15\0\2\3\2\0\7\3\1\0\4\3\1\366\21\3"+
    "\15\0\2\3\2\0\3\3\1\367\3\3\1\0\26\3"+
    "\15\0\2\3\2\0\3\3\1\370\3\3\1\0\26\3"+
    "\15\0\2\3\2\0\1\3\1\371\5\3\1\0\26\3"+
    "\15\0\2\3\2\0\7\3\1\0\3\3\1\372\17\3"+
    "\1\373\2\3\15\0\2\3\2\0\1\3\1\374\5\3"+
    "\1\375\26\3\15\0\2\3\2\0\1\3\1\376\5\3"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\0\11\3"+
    "\1\377\14\3\15\0\2\3\2\0\7\3\1\u0100\26\3"+
    "\15\0\2\3\2\0\7\3\1\u0101\26\3\15\0\2\3"+
    "\2\0\7\3\1\u0102\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\3\3\1\u0103\22\3\15\0\2\3\2\0\2\3"+
    "\1\u0104\4\3\1\0\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\2\3\1\u0105\23\3\15\0\2\3\2\0\7\3"+
    "\1\u0106\26\3\15\0\2\3\2\0\7\3\1\u0107\26\3"+
    "\15\0\2\3\2\0\7\3\1\0\11\3\1\u0108\14\3"+
    "\15\0\2\3\2\0\7\3\1\0\1\3\1\u0109\24\3"+
    "\15\0\2\3\2\0\7\3\1\u010a\20\3\1\u010b\5\3"+
    "\15\0\2\3\2\0\7\3\1\u010c\26\3\15\0\2\3"+
    "\2\0\7\3\1\0\5\3\1\u010d\20\3\15\0\2\3"+
    "\2\0\7\3\1\u010e\26\3\15\0\2\3\2\0\6\3"+
    "\1\u010f\1\0\26\3\15\0\2\3\2\0\1\u0110\6\3"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\0\5\3"+
    "\1\u0111\20\3\15\0\2\3\2\0\1\3\1\u0112\5\3"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\u0113\26\3"+
    "\15\0\2\3\2\0\7\3\1\0\2\3\1\u0114\23\3"+
    "\15\0\2\3\2\0\6\3\1\u0115\1\0\26\3\15\0"+
    "\2\3\2\0\7\3\1\u0116\26\3\15\0\2\3\2\0"+
    "\1\u0117\6\3\1\0\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\1\3\1\u0118\24\3\15\0\2\3\2\0\3\3"+
    "\1\u0119\3\3\1\0\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\11\3\1\u011a\14\3\15\0\2\3\2\0\7\3"+
    "\1\0\22\3\1\u011b\3\3\15\0\2\3\2\0\3\3"+
    "\1\u011c\3\3\1\0\26\3\15\0\2\3\2\0\1\u011d"+
    "\6\3\1\0\26\3\15\0\2\3\2\0\6\3\1\u011e"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\0\1\3"+
    "\1\u011f\24\3\15\0\2\3\2\0\7\3\1\0\2\3"+
    "\1\u0120\23\3\15\0\2\3\2\0\7\3\1\0\17\3"+
    "\1\u0121\6\3\15\0\2\3\2\0\1\3\1\u0122\5\3"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\0\11\3"+
    "\1\u0123\14\3\15\0\2\3\2\0\4\3\1\u0124\2\3"+
    "\1\0\26\3\15\0\2\3\2\0\1\3\1\u0125\5\3"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\u0126\26\3"+
    "\15\0\2\3\2\0\7\3\1\0\1\3\1\u0127\24\3"+
    "\15\0\2\3\2\0\1\3\1\u0128\5\3\1\0\26\3"+
    "\15\0\2\3\2\0\1\3\1\u0129\5\3\1\0\26\3"+
    "\15\0\2\3\2\0\7\3\1\0\5\3\1\u012a\20\3"+
    "\15\0\2\3\2\0\1\u012b\6\3\1\0\26\3\15\0"+
    "\2\3\2\0\7\3\1\0\7\3\1\u012c\16\3\15\0"+
    "\2\3\2\0\7\3\1\u012d\26\3\15\0\2\3\2\0"+
    "\1\u012e\6\3\1\0\26\3\15\0\2\3\2\0\1\3"+
    "\1\u012f\5\3\1\0\26\3\15\0\2\3\2\0\7\3"+
    "\1\u0130\26\3\15\0\2\3\2\0\7\3\1\0\11\3"+
    "\1\u0131\14\3\15\0\2\3\2\0\3\3\1\u0132\3\3"+
    "\1\0\26\3\15\0\2\3\2\0\7\3\1\u0133\26\3"+
    "\15\0\2\3\2\0\7\3\1\0\11\3\1\u0134\14\3"+
    "\15\0\2\3\2\0\7\3\1\u0135\26\3\15\0\2\3"+
    "\2\0\7\3\1\u0136\26\3\15\0\2\3\2\0\7\3"+
    "\1\0\3\3\1\u0137\22\3\15\0\2\3\2\0\7\3"+
    "\1\0\7\3\1\u0138\16\3\15\0\2\3\2\0\1\3"+
    "\1\u0139\5\3\1\0\26\3\15\0\2\3\2\0\7\3"+
    "\1\u013a\26\3\15\0\2\3\2\0\7\3\1\0\11\3"+
    "\1\u013b\14\3\15\0\2\3\2\0\1\u013c\6\3\1\0"+
    "\26\3\15\0\2\3\2\0\7\3\1\0\22\3\1\u013d"+
    "\3\3\15\0\2\3\2\0\4\3\1\u013e\2\3\1\0"+
    "\26\3\15\0\2\3\2\0\7\3\1\u013f\26\3\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\3\11\1\1\7\11\23\1\1\11"+
    "\22\1\4\11\2\1\1\11\17\1\3\11\7\1\1\11"+
    "\37\1\1\11\31\1\2\11\3\1\1\11\3\1\1\11"+
    "\14\1\1\11\1\1\1\11\6\1\1\11\20\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\4\1\1\11\5\1\1\11\1\1\1\11\3\1\1\11"+
    "\6\1\2\11\7\1\1\11\2\1\3\11\3\1\2\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\4\1\1\11"+
    "\2\1\1\11\17\1\1\11\6\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\2\11\3\1\1\11\4\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 public ATLexer() {
     this((java.io.Reader)null);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ATLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.WHITE_SPACE;
            }
          case 75: break;
          case 2: 
            { return DIV_OP;
            }
          case 76: break;
          case 3: 
            { return COL_OP;
            }
          case 77: break;
          case 4: 
            { return MIN_OP;
            }
          case 78: break;
          case 5: 
            { return PLUS_OP;
            }
          case 79: break;
          case 6: 
            { return GREAT_OP;
            }
          case 80: break;
          case 7: 
            { return AND_OP;
            }
          case 81: break;
          case 8: 
            { return OR_OP;
            }
          case 82: break;
          case 9: 
            { return AT_OP;
            }
          case 83: break;
          case 10: 
            { return POW_OP;
            }
          case 84: break;
          case 11: 
            { return TILD_OP;
            }
          case 85: break;
          case 12: 
            { return MUL_OP;
            }
          case 86: break;
          case 13: 
            { return TokenType.BAD_CHARACTER;
            }
          case 87: break;
          case 14: 
            { return COMMENT;
            }
          case 88: break;
          case 15: 
            { return ASSIGN_OP;
            }
          case 89: break;
          case 16: 
            { return SUBTYPE_KEY;
            }
          case 90: break;
          case 17: 
            { return ASYNCSEND_KEY;
            }
          case 91: break;
          case 18: 
            { return HOSEND_KEY;
            }
          case 92: break;
          case 19: 
            { return EQ_OP;
            }
          case 93: break;
          case 20: 
            { return DEF_KEY;
            }
          case 94: break;
          case 21: 
            { return DO_KEY;
            }
          case 95: break;
          case 22: 
            { return IF_KEY;
            }
          case 96: break;
          case 23: 
            { return IN_KEY;
            }
          case 97: break;
          case 24: 
            { return IS_KEY;
            }
          case 98: break;
          case 25: 
            { return NEW_KEY;
            }
          case 99: break;
          case 26: 
            { return NIL_CONST;
            }
          case 100: break;
          case 27: 
            { return AS_KEY;
            }
          case 101: break;
          case 28: 
            { return TRY_KEY;
            }
          case 102: break;
          case 29: 
            { return TRUE_CONST;
            }
          case 103: break;
          case 30: 
            { return SELF_KEY;
            }
          case 104: break;
          case 31: 
            { return ELSE_KEY;
            }
          case 105: break;
          case 32: 
            { return EACH_KEY;
            }
          case 106: break;
          case 33: 
            { return EVAL_KEY;
            }
          case 107: break;
          case 34: 
            { return FALSE_CONST;
            }
          case 108: break;
          case 35: 
            { return THEN_KEY;
            }
          case 109: break;
          case 36: 
            { return SUPER_KEY;
            }
          case 110: break;
          case 37: 
            { return ALIAS_KEY;
            }
          case 111: break;
          case 38: 
            { return WITH_KEY;
            }
          case 112: break;
          case 39: 
            { return WHEN_KEY;
            }
          case 113: break;
          case 40: 
            { return READ_KEY;
            }
          case 114: break;
          case 41: 
            { return PRINT_KEY;
            }
          case 115: break;
          case 42: 
            { return IMPORT_KEY;
            }
          case 116: break;
          case 43: 
            { return ACTOR_KEY;
            }
          case 117: break;
          case 44: 
            { return CATCH_KEY;
            }
          case 118: break;
          case 45: 
            { return WHILE_KEY;
            }
          case 119: break;
          case 46: 
            { return USING_KEY;
            }
          case 120: break;
          case 47: 
            { return RAISE_KEY;
            }
          case 121: break;
          case 48: 
            { return DEFTYPE_KEY;
            }
          case 122: break;
          case 49: 
            { return EXTEND_KEY;
            }
          case 123: break;
          case 50: 
            { return EXPORT_KEY;
            }
          case 124: break;
          case 51: 
            { return EXCLUDE_KEY;
            }
          case 125: break;
          case 52: 
            { return TAGSOF_KEY;
            }
          case 126: break;
          case 53: 
            { return OBJECT_KEY;
            }
          case 127: break;
          case 54: 
            { return UNLESS_KEY;
            }
          case 128: break;
          case 55: 
            { return MIRROR_KEY;
            }
          case 129: break;
          case 56: 
            { return EXTENDS_KEY;
            }
          case 130: break;
          case 57: 
            { return FINALLY_KEY;
            }
          case 131: break;
          case 58: 
            { return FOREACH_KEY;
            }
          case 132: break;
          case 59: 
            { return ISOLATE_KEY;
            }
          case 133: break;
          case 60: 
            { return CHILDOF_KEY;
            }
          case 134: break;
          case 61: 
            { return REFLECT_KEY;
            }
          case 135: break;
          case 62: 
            { return RETRACT_KEY;
            }
          case 136: break;
          case 63: 
            { return BECOMES_KEY;
            }
          case 137: break;
          case 64: 
            { return TAGGEDAS_KEY;
            }
          case 138: break;
          case 65: 
            { return WHENEVER_KEY;
            }
          case 139: break;
          case 66: 
            { return DISCOVERED_KEY;
            }
          case 140: break;
          case 67: 
            { return MIRROREDBY_KEY;
            }
          case 141: break;
          case 68: 
            { return TAKEOFFLINE_KEY;
            }
          case 142: break;
          case 69: 
            { return RECONNECTED_KEY;
            }
          case 143: break;
          case 70: 
            { return DISCONNECTED_KEY;
            }
          case 144: break;
          case 71: 
            { return TAKENOFFLINE_KEY;
            }
          case 145: break;
          case 72: 
            { return USINGHANDLERS_KEY;
            }
          case 146: break;
          case 73: 
            { return REFLECTONACTOR_KEY;
            }
          case 147: break;
          case 74: 
            { return BECOMEMIRROREDBY_KEY;
            }
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
