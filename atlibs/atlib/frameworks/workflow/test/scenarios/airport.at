/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2011
 * Authors: Soft Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author eline.philips
 */

def initModule := lobby.frameworks.workflow.WFinit;
def environmentModule := lobby.frameworks.workflow.environment;
def activityModule := lobby.frameworks.workflow.activity;
def standardPatternsModule := lobby.frameworks.workflow.standardPatterns;
def compensatingActionsModule := lobby.frameworks.workflow.compensatingActions;
def crimeModule := lobby.bridges.crime.CrimeConnection;
def intensionalModule := lobby.frameworks.workflow.intensional;
def CRIMEgroupInteractionsModule := lobby.frameworks.workflow.CRIMEgroupInteractions;

import initModule;
import environmentModule;
import activityModule;
import standardPatternsModule;
import compensatingActionsModule;
//import groupInteractionsModule;
import crimeModule;
import intensionalModule;
import CRIMEgroupInteractionsModule;


def WFenv := SystemEnvironment.new();
//def ServiceDB := ServiceDatabase.new();


WFenv.insert(`passenger, "Stijn Verhaegen");
WFenv.insert(`flight, "BA376 to NewYork");

import /.at.lang.values;
import /.at.lang.futures;
enableFutures(false);
network.online();


def MessagingService := defService(`MessagingService);
def AnnouncementService := defService(`AnnouncementService);
def Assistance := defService(`Assistance);
def BoardingResponsible := defService(`BoardingResponsible);
def LastMinute := defService(`LastMinute);
def LuggageService := defService(`LuggageService);
def ControlTower := defService(`ControlTower);


//==================================
def seq4 := Sequence( BoardingResponsible.waitForPassenger(Env.passenger), ControlTower.takeoff(Env.flight) );
def structDiscr := StructuredDiscriminator( seq4 );

def sync2 := Synchronize( ControlTower.takeoff(Env.flight) );
def seq5 := Sequence( LastMinute.freeSeat(Env.flight, Env.passenger), Connection(sync2) );
def seq6 := Sequence( LuggageService.removeLuggage(Env.flight, Env.passenger), Connection(sync2) );
def seq7 := Sequence( BoardingResponsible.closeGate(Env.flight), Connection(sync2) );
def seq8 := Sequence( MessagingService.gateClosed(Env.flight, Env.passenger), Connection(sync2) );
def parSplit2 := ParallelSplit( seq5, seq6, seq7, seq8 );

def sync1 := Synchronize( parSplit2 ); 

def exc1 := ExclusiveChoice( { |found| found}, structDiscr, Connection(sync1) );
def exc2 := ExclusiveChoice( { |found| found}, structDiscr, Connection(sync1) );
def exc3 := ExclusiveChoice( { |found| found}, structDiscr, Connection(sync1) );

def seq1 := Sequence( MessagingService.reminder(Env.passenger)@Output(Env.found), exc1 );
def seq2 := Sequence( AnnouncementService.missingPerson(Env.passenger)@Output(Env.found), exc2 );
def seq3 := Sequence( Assistance.missingPerson(Env.passenger)@Output(Env.found), exc3 );

def parSplit1 := ParallelSplit( seq1, seq2, seq3 );



def parSplit := ParallelSplit( BoardingResponsible.waitForPassenger(Env.passenger), ControlTower.takeoff(Env.flight) );
